---
import type { Node } from "../../shared/type/folder";
import Button from "../base/button.astro";
import FolderSelector from "./folder-selector.astro";

export interface Props {
  folderTree: Node; 
}

const { folderTree } = Astro.props;
function filterOutNotes(node: Node): Node {
  if (!node.children) return node;

  return {
    ...node,
    children: node.children
      .filter(child => child.type !== "note") 
      .map(child => filterOutNotes(child))
  };
}

const folders = filterOutNotes(folderTree)
console.log("Folders:", folders)
---

<section>
  <form class="upload-form" method="post" enctype="multipart/form-data">
    <input class="file-input" name="files" type="file" accept=".md" multiple />
    <FolderSelector folders={folders}/>
    <div class="separation">
      <Button type="submit" variant="clear"> Upload </Button>
    </div>
  </form>
</section>

<p id="status"></p>

<div id="file-info-list"></div>

<script>
  import { apiFetch } from "../../shared/lib/api";
import type { CreateNode } from "../../shared/type/folder";

  const form = document.querySelector("form") as HTMLFormElement;
  const status = document.getElementById("status") as HTMLParagraphElement;

  const slcFolder = document.getElementById("selected-folder");
  let folderId = 1;
  if(slcFolder) {
    slcFolder.addEventListener("change", (event) => {
      const target = event.target as HTMLSelectElement;
      folderId = Number(target.value);
    })
  }

  async function uploadFiles(formData: FormData): Promise<void> {
    try {
      const response = await apiFetch('/notes/upload/', {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        throw new Error("Network response was not OK");
      }

      const data = await response.json();
      for (let element of data) {
        const newNode: CreateNode = {
            type: 'note', 
            name: element.title, 
            parentId: folderId, 
            noteId: Number(element.id)
        }
        const folderRes = await apiFetch('/dirs/addChild', {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(newNode)
        });

        if (!folderRes.ok) {
          throw new Error("Network response was not OK");
        } 
      }
      updateStatusMessage('File uploaded successfully.');
    } catch (error) {
      console.error("Uploading files failed", error);
      updateStatusMessage("Uploading file(s) failed.");
    }
  }

  function handleSubmit(event: SubmitEvent): void {
    event.preventDefault();

    updateStatusMessage("Uploading file(s)...");
    const formData = new FormData(form);
    uploadFiles(formData);
  }

  form.addEventListener("submit", handleSubmit);

  function updateStatusMessage(message: string): void {
    status.textContent = message;
  }
</script>

<style>
  section {
    display: flex;
    flex-direction: column;
    align-items: left;
  }

  .file-input {
    width: 50%;
    margin-bottom: 10px;
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }

  .info-list {
    padding: 0;
    margin: 0;
    list-style-type: none;
  }

  .separation {
    margin-top: 25px;
  }
</style>
